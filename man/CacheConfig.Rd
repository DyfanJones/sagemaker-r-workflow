% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_steps.R
\name{CacheConfig}
\alias{CacheConfig}
\title{Workflow CacheConfig class}
\description{
Configuration class to enable caching in pipeline workflow.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{config}}{Configures caching in pipeline steps.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-inititialize}{\code{CacheConfig$inititialize()}}
\item \href{#method-format}{\code{CacheConfig$format()}}
\item \href{#method-clone}{\code{CacheConfig$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inititialize"></a>}}
\if{latex}{\out{\hypertarget{method-inititialize}{}}}
\subsection{Method \code{inititialize()}}{
Initialize Workflow CacheConfig
             If caching is enabled, the pipeline attempts to find a previous execution of a step
             that was called with the same arguments. Step caching only considers successful execution.
             If a successful previous execution is found, the pipeline propagates the values
             from previous execution rather than recomputing the step. When multiple successful executions
             exist within the timeout period, it uses the result for the most recent successful execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CacheConfig$inititialize(enable_caching = FALSE, expire_after = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{enable_caching}}{(bool): To enable step caching. Defaults to `FALSE`.}

\item{\code{expire_after}}{(str): If step caching is enabled, a timeout also needs to defined.
It defines how old a previous execution can be to be considered for reuse.
Value should be an ISO 8601 duration string. Defaults to `NULL`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CacheConfig$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CacheConfig$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
