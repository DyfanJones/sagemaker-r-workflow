% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_pipeline.R
\name{Pipeline}
\alias{Pipeline}
\title{Workflow Pipeline class}
\description{
Pipeline for workflow.
}
\section{Super class}{
\code{\link[sagemaker.workflow:Entity]{sagemaker.workflow::Entity}} -> \code{Pipeline}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Pipeline$new()}}
\item \href{#method-to_request}{\code{Pipeline$to_request()}}
\item \href{#method-create}{\code{Pipeline$create()}}
\item \href{#method-describe}{\code{Pipeline$describe()}}
\item \href{#method-update}{\code{Pipeline$update()}}
\item \href{#method-upsert}{\code{Pipeline$upsert()}}
\item \href{#method-delete}{\code{Pipeline$delete()}}
\item \href{#method-start}{\code{Pipeline$start()}}
\item \href{#method-definition}{\code{Pipeline$definition()}}
\item \href{#method-clone}{\code{Pipeline$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="Entity" data-id="format">}\href{../../sagemaker.workflow/html/Entity.html#method-format}{\code{sagemaker.workflow::Entity$format()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Pipeline Class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$new(
  name,
  parameters = list(),
 
    pipeline_experiment_config = PipelineExperimentConfig$new(ExecutionVariables$PIPELINE_NAME,
    ExecutionVariables$PIPELINE_EXECUTION_ID),
  steps = list(),
  sagemaker_session = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): The name of the pipeline.}

\item{\code{parameters}}{(Sequence[Parameter]): The list of the parameters.}

\item{\code{pipeline_experiment_config}}{(Optional[PipelineExperimentConfig]): If set,
the workflow will attempt to create an experiment and trial before
executing the steps. Creation will be skipped if an experiment or a trial with
the same name already exists. By default, pipeline name is used as
experiment name and execution id is used as the trial name.
If set to None, no experiment or trial will be created automatically.}

\item{\code{steps}}{(Sequence[Union[Step, StepCollection]]): The list of the non-conditional steps
associated with the pipeline. Any steps that are within the
`if_steps` or `else_steps` of a `ConditionStep` cannot be listed in the steps of a
pipeline. Of particular note, the workflow service rejects any pipeline definitions that
specify a step in the list of steps of a pipeline and that step in the `if_steps` or
`else_steps` of any `ConditionStep`.}

\item{\code{sagemaker_session}}{(Session): Session object that manages interactions
with Amazon SageMaker APIs and any other AWS services needed. If not specified, the
pipeline creates one using the default AWS configuration chain.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_request"></a>}}
\if{latex}{\out{\hypertarget{method-to_request}{}}}
\subsection{Method \code{to_request()}}{
Gets the request structure for workflow service calls.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$to_request()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create"></a>}}
\if{latex}{\out{\hypertarget{method-create}{}}}
\subsection{Method \code{create()}}{
Creates a Pipeline in the Pipelines service.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$create(
  role_arn,
  description = NULL,
  tags = NULL,
  parallelism_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role_arn}}{(str): The role arn that is assumed by the pipeline to create step artifacts.}

\item{\code{description}}{(str): A description of the pipeline.}

\item{\code{tags}}{(List[Dict[str, str]]): A list of {"Key": "string", "Value": "string"} dicts as
tags.}

\item{\code{parallelism_config}}{(Optional[ParallelismConfiguration]): Parallelism configuration
that is applied to each of the executions of the pipeline. It takes precedence
over the parallelism configuration of the parent pipeline.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A response dict from the service.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-describe"></a>}}
\if{latex}{\out{\hypertarget{method-describe}{}}}
\subsection{Method \code{describe()}}{
Describes a Pipeline in the Workflow service.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$describe()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Response dict from the service. See `boto3 client documentation
             \url{https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.describe_pipeline}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
Updates a Pipeline in the Workflow service.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$update(role_arn, description = NULL, parallelism_config = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role_arn}}{(str): The role arn that is assumed by pipelines to create step artifacts.}

\item{\code{description}}{(str): A description of the pipeline.}

\item{\code{parallelism_config}}{(Optional[ParallelismConfiguration]): Parallelism configuration
that is applied to each of the executions of the pipeline. It takes precedence
over the parallelism configuration of the parent pipeline.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A response dict from the service.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-upsert"></a>}}
\if{latex}{\out{\hypertarget{method-upsert}{}}}
\subsection{Method \code{upsert()}}{
Creates a pipeline or updates it, if it already exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$upsert(
  role_arn,
  description = NULL,
  tags = NULL,
  parallelism_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role_arn}}{(str): The role arn that is assumed by workflow to create step artifacts.}

\item{\code{description}}{(str): A description of the pipeline.}

\item{\code{tags}}{(List[Dict[str, str]]): A list of {"Key": "string", "Value": "string"} dicts as
tags.}

\item{\code{parallelism_config}}{(Optional[Config for parallel steps, Parallelism configuration that
is applied to each of. the executions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
response dict from service
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
Deletes a Pipeline in the Workflow service.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$delete()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A response dict from the service.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start"></a>}}
\if{latex}{\out{\hypertarget{method-start}{}}}
\subsection{Method \code{start()}}{
Starts a Pipeline execution in the Workflow service.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$start(
  parameters = NULL,
  execution_display_name = NULL,
  execution_description = NULL,
  parallelism_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameters}}{(Dict[str, Union[str, bool, int, float]]): values to override
pipeline parameters.}

\item{\code{execution_display_name}}{(str): The display name of the pipeline execution.}

\item{\code{execution_description}}{(str): A description of the execution.}

\item{\code{parallelism_config}}{(Optional[ParallelismConfiguration]): Parallelism configuration
that is applied to each of the executions of the pipeline. It takes precedence
over the parallelism configuration of the parent pipeline.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A `.PipelineExecution` instance, if successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-definition"></a>}}
\if{latex}{\out{\hypertarget{method-definition}{}}}
\subsection{Method \code{definition()}}{
Converts a request structure to string representation for workflow service calls.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$definition()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
