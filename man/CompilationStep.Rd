% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_steps.R
\name{CompilationStep}
\alias{CompilationStep}
\title{CompilationStep class}
\description{
Compilation step for workflow.
}
\section{Super classes}{
\code{\link[sagemaker.workflow:Entity]{sagemaker.workflow::Entity}} -> \code{\link[sagemaker.workflow:Step]{sagemaker.workflow::Step}} -> \code{\link[sagemaker.workflow:ConfigurableRetryStep]{sagemaker.workflow::ConfigurableRetryStep}} -> \code{CompilationStep}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{arguments}}{The arguments dict that is used to call `create_compilation_job`.
NOTE: The CreateTrainingJob request is not quite the args list that workflow needs.
The TrainingJobName and ExperimentConfig attributes cannot be included.}

\item{\code{properties}}{A Properties object representing the DescribeTrainingJobResponse data model.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CompilationStep$new()}}
\item \href{#method-to_request}{\code{CompilationStep$to_request()}}
\item \href{#method-clone}{\code{CompilationStep$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="Step" data-id="add_depends_on">}\href{../../sagemaker.workflow/html/Step.html#method-add_depends_on}{\code{sagemaker.workflow::Step$add_depends_on()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="Step" data-id="format">}\href{../../sagemaker.workflow/html/Step.html#method-format}{\code{sagemaker.workflow::Step$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="ConfigurableRetryStep" data-id="add_retry_policy">}\href{../../sagemaker.workflow/html/ConfigurableRetryStep.html#method-add_retry_policy}{\code{sagemaker.workflow::ConfigurableRetryStep$add_retry_policy()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Construct a CompilationStep.
             Given an `EstimatorBase` and a `sagemaker.model.Model` instance construct a CompilationStep.
             In addition to the estimator and Model instances, the other arguments are those that are
             supplied to the `compile_model` method of the `sagemaker.model.Model.compile_model`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationStep$new(
  name,
  estimator,
  model,
  inputs = NULL,
  job_arguments = NULL,
  depends_on = NULL,
  retry_policies = NULL,
  display_name = NULL,
  description = NULL,
  cache_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): The name of the compilation step.}

\item{\code{estimator}}{(EstimatorBase): A `sagemaker.estimator.EstimatorBase` instance.}

\item{\code{model}}{(Model): A `sagemaker.model.Model` instance.}

\item{\code{inputs}}{(CompilationInput): A `sagemaker.inputs.CompilationInput` instance.
Defaults to `None`.}

\item{\code{job_arguments}}{(List[str]): A list of strings to be passed into the processing job.
Defaults to `None`.}

\item{\code{depends_on}}{(List[str] or List[Step]): A list of step names or step instances
this `sagemaker.workflow.steps.CompilationStep` depends on}

\item{\code{retry_policies}}{(List[RetryPolicy]):  A list of retry policy}

\item{\code{display_name}}{(str): The display name of the compilation step.}

\item{\code{description}}{(str): The description of the compilation step.}

\item{\code{cache_config}}{(CacheConfig): A `sagemaker.workflow.steps.CacheConfig` instance.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_request"></a>}}
\if{latex}{\out{\hypertarget{method-to_request}{}}}
\subsection{Method \code{to_request()}}{
Updates the dictionary with cache configuration.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationStep$to_request()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationStep$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
