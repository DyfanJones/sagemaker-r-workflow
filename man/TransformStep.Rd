% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_steps.R
\name{TransformStep}
\alias{TransformStep}
\title{Workflow TransformStep class}
\description{
Transform step for workflow.
}
\section{Super classes}{
\code{\link[sagemaker.workflow:Entity]{sagemaker.workflow::Entity}} -> \code{\link[sagemaker.workflow:Step]{sagemaker.workflow::Step}} -> \code{TransformStep}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{arguments}}{The arguments dict that is used to call `create_transform_job`.
NOTE: The CreateTransformJob request is not quite the args list that workflow needs.
TransformJobName and ExperimentConfig cannot be included in the arguments.}

\item{\code{properties}}{A Properties object representing the DescribeTransformJobResponse data model.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TransformStep$new()}}
\item \href{#method-to_request}{\code{TransformStep$to_request()}}
\item \href{#method-clone}{\code{TransformStep$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="Step" data-id="add_depends_on">}\href{../../sagemaker.workflow/html/Step.html#method-add_depends_on}{\code{sagemaker.workflow::Step$add_depends_on()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="Step" data-id="format">}\href{../../sagemaker.workflow/html/Step.html#method-format}{\code{sagemaker.workflow::Step$format()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Constructs a TransformStep, given an `Transformer` instance.
             In addition to the transformer instance, the other arguments are those that are supplied to
             the `transform` method of the `sagemaker.transformer.Transformer`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TransformStep$new(
  name,
  transformer,
  inputs,
  cache_config = NULL,
  depends_on = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): The name of the transform step.}

\item{\code{transformer}}{(Transformer): A `sagemaker.transformer.Transformer` instance.}

\item{\code{inputs}}{(TransformInput): A `sagemaker.inputs.TransformInput` instance.}

\item{\code{cache_config}}{(CacheConfig):  A `sagemaker.workflow.steps.CacheConfig` instance.}

\item{\code{depends_on}}{(List[str]): A list of step names this `sagemaker.workflow.steps.TransformStep`
depends on}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_request"></a>}}
\if{latex}{\out{\hypertarget{method-to_request}{}}}
\subsection{Method \code{to_request()}}{
Updates the dictionary with cache configuration.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TransformStep$to_request()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TransformStep$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
