% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_entities.R
\name{PipelineVariable}
\alias{PipelineVariable}
\title{Base object for pipeline variables}
\description{
PipelineVariables must implement the expr property.
}
\keyword{Internal}
\section{Super class}{
\code{\link[sagemaker.workflow:PropertiesMeta]{sagemaker.workflow::PropertiesMeta}} -> \code{PipelineVariable}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{expr}}{Get the expression structure for workflow service calls.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-to_string}{\code{PipelineVariable$to_string()}}
\item \href{#method-startswith}{\code{PipelineVariable$startswith()}}
\item \href{#method-endswith}{\code{PipelineVariable$endswith()}}
\item \href{#method-clone}{\code{PipelineVariable$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="PropertiesMeta" data-id="format">}\href{../../sagemaker.workflow/html/PropertiesMeta.html#method-format}{\code{sagemaker.workflow::PropertiesMeta$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.workflow" data-topic="PropertiesMeta" data-id="initialize">}\href{../../sagemaker.workflow/html/PropertiesMeta.html#method-initialize}{\code{sagemaker.workflow::PropertiesMeta$initialize()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_string"></a>}}
\if{latex}{\out{\hypertarget{method-to_string}{}}}
\subsection{Method \code{to_string()}}{
Prompt the pipeline to convert the pipeline variable to String in runtime
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipelineVariable$to_string()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-startswith"></a>}}
\if{latex}{\out{\hypertarget{method-startswith}{}}}
\subsection{Method \code{startswith()}}{
Simulate the Python string's built-in method: startswith
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipelineVariable$startswith(prefix, start = NULL, end = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{(str, tuple): The (tuple of) string to be checked.}

\item{\code{start}}{(int): To set the start index of the matching boundary (default: None).}

\item{\code{end}}{(int): To set the end index of the matching boundary (default: None).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
bool: Always return False as Pipeline variables are parsed during execution runtime
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-endswith"></a>}}
\if{latex}{\out{\hypertarget{method-endswith}{}}}
\subsection{Method \code{endswith()}}{
Simulate the Python string's built-in method: endswith
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipelineVariable$endswith(suffix, start = NULL, end = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{suffix}}{(str, tuple): The (tuple of) string to be checked.}

\item{\code{start}}{(int): To set the start index of the matching boundary (default: None).}

\item{\code{end}}{(int): To set the end index of the matching boundary (default: None).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
bool: Always return False as Pipeline variables are parsed during execution runtime
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipelineVariable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
