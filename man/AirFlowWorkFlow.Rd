% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_airflow.R
\name{AirFlowWorkFlow}
\alias{AirFlowWorkFlow}
\title{AirFlowWorkFlow helper class}
\description{
Helper class to take sagemaker classes and format output for Airflow.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-prepare_framework}{\code{AirFlowWorkFlow$prepare_framework()}}
\item \href{#method-prepare_amazon_algorithm_estimator}{\code{AirFlowWorkFlow$prepare_amazon_algorithm_estimator()}}
\item \href{#method-training_base_config}{\code{AirFlowWorkFlow$training_base_config()}}
\item \href{#method-training_config}{\code{AirFlowWorkFlow$training_config()}}
\item \href{#method-tuning_config}{\code{AirFlowWorkFlow$tuning_config()}}
\item \href{#method-update_submit_s3_uri}{\code{AirFlowWorkFlow$update_submit_s3_uri()}}
\item \href{#method-update_estimator_from_task}{\code{AirFlowWorkFlow$update_estimator_from_task()}}
\item \href{#method-prepare_framework_container_def}{\code{AirFlowWorkFlow$prepare_framework_container_def()}}
\item \href{#method-model_config}{\code{AirFlowWorkFlow$model_config()}}
\item \href{#method-model_config_from_estimator}{\code{AirFlowWorkFlow$model_config_from_estimator()}}
\item \href{#method-transform_config}{\code{AirFlowWorkFlow$transform_config()}}
\item \href{#method-transform_config_from_estimator}{\code{AirFlowWorkFlow$transform_config_from_estimator()}}
\item \href{#method-deploy_config}{\code{AirFlowWorkFlow$deploy_config()}}
\item \href{#method-deploy_config_from_estimator}{\code{AirFlowWorkFlow$deploy_config_from_estimator()}}
\item \href{#method-processing_config}{\code{AirFlowWorkFlow$processing_config()}}
\item \href{#method-input_output_list_converter}{\code{AirFlowWorkFlow$input_output_list_converter()}}
\item \href{#method-format}{\code{AirFlowWorkFlow$format()}}
\item \href{#method-clone}{\code{AirFlowWorkFlow$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_framework"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_framework}{}}}
\subsection{Method \code{prepare_framework()}}{
Prepare S3 operations and environment variables related to framework.
             S3 operations specify where to upload `source_dir`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$prepare_framework(estimator, s3_operations)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.estimator.Estimator): The framework estimator to
get information from and update.}

\item{\code{s3_operations}}{(dict): The dict to specify s3 operations (upload
`source_dir` ).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_amazon_algorithm_estimator"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_amazon_algorithm_estimator}{}}}
\subsection{Method \code{prepare_amazon_algorithm_estimator()}}{
Sets up amazon algorithm estimator.
             This is done by adding the required `feature_dim` hyperparameter from training data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$prepare_amazon_algorithm_estimator(
  estimator,
  inputs,
  mini_batch_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.amazon.amazon_estimator.AmazonAlgorithmEstimatorBase): An estimator
for a built-in Amazon algorithm to get information from and update.}

\item{\code{inputs}}{: The training data.
* (sagemaker.amazon.amazon_estimator.RecordSet) - A collection of
Amazon :class:~`Record` objects serialized and stored in S3. For
use with an estimator for an Amazon algorithm.
* (list[sagemaker.amazon.amazon_estimator.RecordSet]) - A list of
:class:~`sagemaker.amazon.amazon_estimator.RecordSet` objects,
where each instance is a different channel of training data.}

\item{\code{mini_batch_size}}{(numeric):}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-training_base_config"></a>}}
\if{latex}{\out{\hypertarget{method-training_base_config}{}}}
\subsection{Method \code{training_base_config()}}{
Export Airflow base training config from an estimator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$training_base_config(
  estimator,
  inputs = NULL,
  job_name = NULL,
  mini_batch_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.estimator.EstimatorBase): The estimator to export
training config from. Can be a BYO estimator, Framework estimator or
Amazon algorithm estimator.}

\item{\code{inputs}}{: Information about the training data. Please refer to the ``fit()``
method of
the associated estimator, as this can take any of the following
forms:
* (str) - The S3 location where training data is saved.
* (dict[str, str] or dict[str, sagemaker.inputs.TrainingInput]) - If using multiple
channels for training data, you can specify a dict mapping channel names to
strings or :func:`~sagemaker.inputs.TrainingInput` objects.
* (sagemaker.inputs.TrainingInput) - Channel configuration for S3 data sources that can
provide additional information about the training dataset. See
:func:`sagemaker.inputs.TrainingInput` for full details.
* (sagemaker.amazon.amazon_estimator.RecordSet) - A collection of
Amazon :class:~`Record` objects serialized and stored in S3.
For use with an estimator for an Amazon algorithm.
* (list[sagemaker.amazon.amazon_estimator.RecordSet]) - A list of
:class:~`sagemaker.amazon.amazon_estimator.RecordSet` objects,
where each instance is a different channel of training data.}

\item{\code{job_name}}{(str): Specify a training job name if needed.}

\item{\code{mini_batch_size}}{(int): Specify this argument only when estimator is a
built-in estimator of an Amazon algorithm. For other estimators,
batch size should be specified in the estimator.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Training config that can be directly used by
             SageMakerTrainingOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-training_config"></a>}}
\if{latex}{\out{\hypertarget{method-training_config}{}}}
\subsection{Method \code{training_config()}}{
Export Airflow training config from an estimator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$training_config(
  estimator,
  inputs = NULL,
  job_name = NULL,
  mini_batch_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.estimator.EstimatorBase): The estimator to export
training config from. Can be a BYO estimator, Framework estimator or
Amazon algorithm estimator.}

\item{\code{inputs}}{: Information about the training data. Please refer to the ``fit()``
method of the associated estimator, as this can take any of the following forms:
* (str) - The S3 location where training data is saved.
* (dict[str, str] or dict[str, sagemaker.inputs.TrainingInput]) - If using multiple
channels for training data, you can specify a dict mapping channel names to
strings or :func:`~sagemaker.inputs.TrainingInput` objects.
* (sagemaker.inputs.TrainingInput) - Channel configuration for S3 data sources that can
provide additional information about the training dataset. See
:func:`sagemaker.inputs.TrainingInput` for full details.
* (sagemaker.amazon.amazon_estimator.RecordSet) - A collection of
Amazon :class:~`Record` objects serialized and stored in S3.
For use with an estimator for an Amazon algorithm.
* (list[sagemaker.amazon.amazon_estimator.RecordSet]) - A list of
:class:~`sagemaker.amazon.amazon_estimator.RecordSet` objects,
where each instance is a different channel of training data.}

\item{\code{job_name}}{(str): Specify a training job name if needed.}

\item{\code{mini_batch_size}}{(int): Specify this argument only when estimator is a
built-in estimator of an Amazon algorithm. For other estimators,
batch size should be specified in the estimator.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Training config that can be directly used by
             SageMakerTrainingOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tuning_config"></a>}}
\if{latex}{\out{\hypertarget{method-tuning_config}{}}}
\subsection{Method \code{tuning_config()}}{
Export Airflow tuning config from a HyperparameterTuner
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$tuning_config(
  tuner,
  inputs,
  job_name = NULL,
  include_cls_metadata = FALSE,
  mini_batch_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tuner}}{(sagemaker.tuner.HyperparameterTuner): The tuner to export tuning
config from.}

\item{\code{inputs}}{: Information about the training data. Please refer to the ``fit()``
method of the associated estimator in the tuner, as this can take any of the
following forms:
* (str) - The S3 location where training data is saved.
* (dict[str, str] or dict[str, sagemaker.inputs.TrainingInput]) - If using multiple
channels for training data, you can specify a dict mapping channel names to
strings or :func:`~sagemaker.inputs.TrainingInput` objects.
* (sagemaker.inputs.TrainingInput) - Channel configuration for S3 data sources that can
provide additional information about the training dataset. See
:func:`sagemaker.inputs.TrainingInput` for full details.
* (sagemaker.amazon.amazon_estimator.RecordSet) - A collection of
Amazon :class:~`Record` objects serialized and stored in S3.
For use with an estimator for an Amazon algorithm.
* (list[sagemaker.amazon.amazon_estimator.RecordSet]) - A list of
:class:~`sagemaker.amazon.amazon_estimator.RecordSet` objects,
where each instance is a different channel of training data.
* (dict[str, one the forms above]): Required by only tuners created via
the factory method ``HyperparameterTuner.create()``. The keys should be the
same estimator names as keys for the ``estimator_dict`` argument of the
``HyperparameterTuner.create()`` method.}

\item{\code{job_name}}{(str): Specify a tuning job name if needed.}

\item{\code{include_cls_metadata}}{: It can take one of the following two forms.
* (bool) - Whether or not the hyperparameter tuning job should include information
about the estimator class (default: False). This information is passed as a
hyperparameter, so if the algorithm you are using cannot handle unknown
hyperparameters (e.g. an Amazon SageMaker built-in algorithm that does not
have a custom estimator in the Python SDK), then set ``include_cls_metadata``
to ``False``.
* (dict[str, bool]) - This version should be used for tuners created via the factory
method ``HyperparameterTuner.create()``, to specify the flag for individual
estimators provided in the ``estimator_dict`` argument of the method. The keys
would be the same estimator names as in ``estimator_dict``. If one estimator
doesn't need the flag set, then no need to include it in the dictionary. If none
of the estimators need the flag set, then an empty dictionary ``{}`` must be used.}

\item{\code{mini_batch_size}}{: It can take one of the following two forms.
* (int) - Specify this argument only when estimator is a built-in estimator of an
Amazon algorithm. For other estimators, batch size should be specified in the
estimator.
* (dict[str, int]) - This version should be used for tuners created via the factory
method ``HyperparameterTuner.create()``, to specify the value for individual
estimators provided in the ``estimator_dict`` argument of the method. The keys
would be the same estimator names as in ``estimator_dict``. If one estimator
doesn't need the value set, then no need to include it in the dictionary. If
none of the estimators need the value set, then an empty dictionary ``{}``
must be used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Tuning config that can be directly used by SageMakerTuningOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_submit_s3_uri"></a>}}
\if{latex}{\out{\hypertarget{method-update_submit_s3_uri}{}}}
\subsection{Method \code{update_submit_s3_uri()}}{
Updated the S3 URI of the framework source directory in given estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$update_submit_s3_uri(estimator, job_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.estimator.Framework): The Framework estimator to
update.}

\item{\code{job_name}}{(str): The new job name included in the submit S3 URI}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
str: The updated S3 URI of framework source directory
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_estimator_from_task"></a>}}
\if{latex}{\out{\hypertarget{method-update_estimator_from_task}{}}}
\subsection{Method \code{update_estimator_from_task()}}{
Update training job of the estimator from a task in the DAG
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$update_estimator_from_task(estimator, task_id, task_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.estimator.EstimatorBase): The estimator to update}

\item{\code{task_id}}{(str): The task id of any
airflow.contrib.operators.SageMakerTrainingOperator or
airflow.contrib.operators.SageMakerTuningOperator that generates
training jobs in the DAG.}

\item{\code{task_type}}{(str): Whether the task is from SageMakerTrainingOperator or
SageMakerTuningOperator. Values can be 'training', 'tuning' or None
(which means training job is not from any task).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_framework_container_def"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_framework_container_def}{}}}
\subsection{Method \code{prepare_framework_container_def()}}{
This prepares the framework model container information and specifies related S3 operations.
             Prepare the framework model container information. Specify related S3
             operations for Airflow to perform. (Upload `source_dir` )
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$prepare_framework_container_def(
  model,
  instance_type,
  s3_operations
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model}}{(sagemaker.model.FrameworkModel): The framework model}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to. For
example, 'ml.p2.xlarge'.}

\item{\code{s3_operations}}{(dict): The dict to specify S3 operations (upload
`source_dir` ).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: The container information of this framework model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-model_config"></a>}}
\if{latex}{\out{\hypertarget{method-model_config}{}}}
\subsection{Method \code{model_config()}}{
Export Airflow model config from a SageMaker model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$model_config(
  model,
  instance_type = NULL,
  role = NULL,
  image_uri = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model}}{(sagemaker.model.Model): The Model object from which to export the Airflow config}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to. For
example, 'ml.p2.xlarge'}

\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the model}

\item{\code{image_uri}}{(str): An Docker image URI to use for deploying the model}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Model config that can be directly used by SageMakerModelOperator
             in Airflow. It can also be part of the config used by
             SageMakerEndpointOperator and SageMakerTransformOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-model_config_from_estimator"></a>}}
\if{latex}{\out{\hypertarget{method-model_config_from_estimator}{}}}
\subsection{Method \code{model_config_from_estimator()}}{
Export Airflow model config from a SageMaker estimator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$model_config_from_estimator(
  estimator,
  task_id,
  task_type,
  instance_type = None,
  role = None,
  image_uri = None,
  name = None,
  model_server_workers = None,
  vpc_config_override = "VPC_CONFIG_DEFAULT"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.model.EstimatorBase): The SageMaker estimator to
export Airflow config from. It has to be an estimator associated
with a training job.}

\item{\code{task_id}}{(str): The task id of any
airflow.contrib.operators.SageMakerTrainingOperator or
airflow.contrib.operators.SageMakerTuningOperator that generates
training jobs in the DAG. The model config is built based on the
training job generated in this operator.}

\item{\code{task_type}}{(str): Whether the task is from SageMakerTrainingOperator or
SageMakerTuningOperator. Values can be 'training', 'tuning' or None
(which means training job is not from any task).}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to. For
example, 'ml.p2.xlarge'}

\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the model}

\item{\code{image_uri}}{(str): A Docker image URI to use for deploying the model}

\item{\code{name}}{(str): Name of the model}

\item{\code{model_server_workers}}{(int): The number of worker processes used by the
inference server. If None, server will use one worker per vCPU. Only
effective when estimator is a SageMaker framework.}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Override for VpcConfig set on
the model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Model config that can be directly used by SageMakerModelOperator in Airflow. It can
             also be part of the config used by SageMakerEndpointOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transform_config"></a>}}
\if{latex}{\out{\hypertarget{method-transform_config}{}}}
\subsection{Method \code{transform_config()}}{
Export Airflow transform config from a SageMaker transformer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$transform_config(
  transformer,
  data,
  data_type = "S3Prefix",
  content_type = NULL,
  compression_type = NULL,
  split_type = NULL,
  job_name = NULL,
  input_filter = NULL,
  output_filter = NULL,
  join_source = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transformer}}{(sagemaker.transformer.Transformer): The SageMaker
transformer to export Airflow config from.}

\item{\code{data}}{(str): Input data location in S3.}

\item{\code{data_type}}{(str): What the S3 location defines (default: 'S3Prefix').
Valid values:
* 'S3Prefix' - the S3 URI defines a key name prefix. All objects with this prefix will
be used as inputs for the transform job.
* 'ManifestFile' - the S3 URI points to a single manifest file listing each S3 object
to use as an input for the transform job.}

\item{\code{content_type}}{(str): MIME type of the input data (default: None).}

\item{\code{compression_type}}{(str): Compression type of the input data, if
compressed (default: None). Valid values: 'Gzip', None.}

\item{\code{split_type}}{(str): The record delimiter for the input object (default:
'None'). Valid values: 'None', 'Line', 'RecordIO', and 'TFRecord'.}

\item{\code{job_name}}{(str): job name (default: None). If not specified, one will be
generated.}

\item{\code{input_filter}}{(str): A JSONPath to select a portion of the input to
pass to the algorithm container for inference. If you omit the
field, it gets the value '$', representing the entire input.
For CSV data, each row is taken as a JSON array,
so only index-based JSONPaths can be applied, e.g. $[0], $[1:].
CSV data should follow the `RFC format <https://tools.ietf.org/html/rfc4180>`_.
See `Supported JSONPath Operators
<https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators>`_
for a table of supported JSONPath operators.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.features" (default: None).}

\item{\code{output_filter}}{(str): A JSONPath to select a portion of the
joined/original output to return as the output.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.prediction" (default: None).}

\item{\code{join_source}}{(str): The source of data to be joined to the transform
output. It can be set to 'Input' meaning the entire input record
will be joined to the inference result. You can use OutputFilter
to select the useful portion before uploading to S3. (default:
None). Valid values: Input, None.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Transform config that can be directly used by
             SageMakerTransformOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transform_config_from_estimator"></a>}}
\if{latex}{\out{\hypertarget{method-transform_config_from_estimator}{}}}
\subsection{Method \code{transform_config_from_estimator()}}{
Export Airflow transform config from a SageMaker estimator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$transform_config_from_estimator(
  estimator,
  task_id,
  task_type,
  instance_count,
  instance_type,
  data,
  data_type = "S3Prefix",
  content_type = NULL,
  compression_type = NULL,
  split_type = NULL,
  job_name = NULL,
  model_name = NULL,
  strategy = NULL,
  assemble_with = NULL,
  output_path = NULL,
  output_kms_key = NULL,
  accept = NULL,
  env = NULL,
  max_concurrent_transforms = NULL,
  max_payload = NULL,
  tags = NULL,
  role = NULL,
  volume_kms_key = NULL,
  model_server_workers = NULL,
  image_uri = NULL,
  vpc_config_override = NULL,
  input_filter = NULL,
  output_filter = NULL,
  join_source = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.model.EstimatorBase): The SageMaker estimator to
export Airflow config from. It has to be an estimator associated
with a training job.}

\item{\code{task_id}}{(str): The task id of any
airflow.contrib.operators.SageMakerTrainingOperator or
airflow.contrib.operators.SageMakerTuningOperator that generates
training jobs in the DAG. The transform config is built based on the
training job generated in this operator.}

\item{\code{task_type}}{(str): Whether the task is from SageMakerTrainingOperator or
SageMakerTuningOperator. Values can be 'training', 'tuning' or None
(which means training job is not from any task).}

\item{\code{instance_count}}{(int): Number of EC2 instances to use.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use, for example,
'ml.c4.xlarge'.}

\item{\code{data}}{(str): Input data location in S3.}

\item{\code{data_type}}{(str): What the S3 location defines (default: 'S3Prefix').
Valid values:
* 'S3Prefix' - the S3 URI defines a key name prefix. All objects with this prefix will
be used as inputs for the transform job.
* 'ManifestFile' - the S3 URI points to a single manifest file listing each S3 object
to use as an input for the transform job.}

\item{\code{content_type}}{(str): MIME type of the input data (default: None).}

\item{\code{compression_type}}{(str): Compression type of the input data, if
compressed (default: None). Valid values: 'Gzip', None.}

\item{\code{split_type}}{(str): The record delimiter for the input object (default:
'None'). Valid values: 'None', 'Line', 'RecordIO', and 'TFRecord'.}

\item{\code{job_name}}{(str): transform job name (default: None). If not specified,
one will be generated.}

\item{\code{model_name}}{(str): model name (default: None). If not specified, one will
be generated.}

\item{\code{strategy}}{(str): The strategy used to decide how to batch records in a
single request (default: None). Valid values: 'MultiRecord' and
'SingleRecord'.}

\item{\code{assemble_with}}{(str): How the output is assembled (default: None). Valid
values: 'Line' or 'None'.}

\item{\code{output_path}}{(str): S3 location for saving the transform result. If not
specified, results are stored to a default bucket.}

\item{\code{output_kms_key}}{(str): Optional. KMS key ID for encrypting the transform
output (default: None).}

\item{\code{accept}}{(str): The accept header passed by the client to
the inference endpoint. If it is supported by the endpoint,
it will be the format of the batch transform output.}

\item{\code{env}}{(dict): Environment variables to be set for use during the transform
job (default: None).}

\item{\code{max_concurrent_transforms}}{(int): The maximum number of HTTP requests to
be made to each individual transform container at one time.}

\item{\code{max_payload}}{(int): Maximum size of the payload in a single HTTP request
to the container in MB.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a transform job. If none
specified, then the tags used for the training job are used for the
transform job.}

\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the ``Model``,
which is also used during transform jobs. If not specified, the role
from the Estimator will be used.}

\item{\code{volume_kms_key}}{(str): Optional. KMS key ID for encrypting the volume
attached to the ML compute instance (default: None).}

\item{\code{model_server_workers}}{(int): Optional. The number of worker processes
used by the inference server. If None, server will use one worker
per vCPU.}

\item{\code{image_uri}}{(str): A Docker image URI to use for deploying the model}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Override for VpcConfig set on
the model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{input_filter}}{(str): A JSONPath to select a portion of the input to
pass to the algorithm container for inference. If you omit the
field, it gets the value '$', representing the entire input.
For CSV data, each row is taken as a JSON array,
so only index-based JSONPaths can be applied, e.g. $[0], $[1:].
CSV data should follow the `RFC format <https://tools.ietf.org/html/rfc4180>`_.
See `Supported JSONPath Operators
<https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators>`_
for a table of supported JSONPath operators.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.features" (default: None).}

\item{\code{output_filter}}{(str): A JSONPath to select a portion of the
joined/original output to return as the output.
For more information, see the SageMaker API documentation for
`CreateTransformJob
<https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html>`_.
Some examples: "$[1:]", "$.prediction" (default: None).}

\item{\code{join_source}}{(str): The source of data to be joined to the transform
output. It can be set to 'Input' meaning the entire input record
will be joined to the inference result. You can use OutputFilter
to select the useful portion before uploading to S3. (default:
None). Valid values: Input, None.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Transform config that can be directly used by
             SageMakerTransformOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deploy_config"></a>}}
\if{latex}{\out{\hypertarget{method-deploy_config}{}}}
\subsection{Method \code{deploy_config()}}{
Export Airflow deploy config from a SageMaker model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$deploy_config(
  model,
  initial_instance_count,
  instance_type,
  endpoint_name = NULL,
  tags = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model}}{(sagemaker.model.Model): The SageMaker model to export the Airflow
config from.}

\item{\code{initial_instance_count}}{(int): The initial number of instances to run in
the ``Endpoint`` created from this ``Model``.}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy this Model to. For
example, 'ml.p2.xlarge'.}

\item{\code{endpoint_name}}{(str): The name of the endpoint to create (default: None).
If not specified, a unique endpoint name will be created.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a training job. For more,
see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Deploy config that can be directly used by
             SageMakerEndpointOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deploy_config_from_estimator"></a>}}
\if{latex}{\out{\hypertarget{method-deploy_config_from_estimator}{}}}
\subsection{Method \code{deploy_config_from_estimator()}}{
Export Airflow deploy config from a SageMaker estimator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$deploy_config_from_estimator(
  estimator,
  task_id,
  task_type,
  initial_instance_count,
  instance_type,
  model_name = NULL,
  endpoint_name = NULL,
  tags = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{estimator}}{(sagemaker.model.EstimatorBase): The SageMaker estimator to
export Airflow config from. It has to be an estimator associated
with a training job.}

\item{\code{task_id}}{(str): The task id of any
airflow.contrib.operators.SageMakerTrainingOperator or
airflow.contrib.operators.SageMakerTuningOperator that generates
training jobs in the DAG. The endpoint config is built based on the
training job generated in this operator.}

\item{\code{task_type}}{(str): Whether the task is from SageMakerTrainingOperator or
SageMakerTuningOperator. Values can be 'training', 'tuning' or None
(which means training job is not from any task).}

\item{\code{initial_instance_count}}{(int): Minimum number of EC2 instances to deploy
to an endpoint for prediction.}

\item{\code{instance_type}}{(str): Type of EC2 instance to deploy to an endpoint for
prediction, for example, 'ml.c4.xlarge'.}

\item{\code{model_name}}{(str): Name to use for creating an Amazon SageMaker model. If
not specified, one will be generated.}

\item{\code{endpoint_name}}{(str): Name to use for creating an Amazon SageMaker
endpoint. If not specified, the name of the SageMaker model is used.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a training job. For more,
see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}

\item{\code{...}}{: Passed to invocation of ``create_model()``. Implementations
may customize ``create_model()`` to accept ``**kwargs`` to customize
model creation during deploy. For more, see the implementation docs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Deploy config that can be directly used by
             SageMakerEndpointOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-processing_config"></a>}}
\if{latex}{\out{\hypertarget{method-processing_config}{}}}
\subsection{Method \code{processing_config()}}{
Export Airflow processing config from a SageMaker processor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$processing_config(
  processor,
  inputs = NULL,
  outputs = NULL,
  job_name = NULL,
  experiment_config = NULL,
  container_arguments = NULL,
  container_entrypoint = NULL,
  kms_key_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{processor}}{(sagemaker.processor.Processor): The SageMaker
processor to export Airflow config from.}

\item{\code{inputs}}{(list[:class:`~sagemaker.processing.ProcessingInput`]): Input files for
the processing job. These must be provided as
:class:`~sagemaker.processing.ProcessingInput` objects (default: None).}

\item{\code{outputs}}{(list[:class:`~sagemaker.processing.ProcessingOutput`]): Outputs for
the processing job. These can be specified as either path strings or
:class:`~sagemaker.processing.ProcessingOutput` objects (default: None).}

\item{\code{job_name}}{(str): Processing job name. If not specified, the processor generates
a default job name, based on the base job name and current timestamp.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys:
'ExperimentName', 'TrialName', and 'TrialComponentDisplayName'.}

\item{\code{container_arguments}}{([str]): The arguments for a container used to run a processing job.}

\item{\code{container_entrypoint}}{([str]): The entrypoint for a container used to run a processing job.}

\item{\code{kms_key_id}}{(str): The AWS Key Management Service (AWS KMS) key that Amazon SageMaker
uses to encrypt the processing job output. KmsKeyId can be an ID of a KMS key,
ARN of a KMS key, alias of a KMS key, or alias of a KMS key.
The KmsKeyId is applied to all outputs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
dict: Processing config that can be directly used by
           SageMakerProcessingOperator in Airflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-input_output_list_converter"></a>}}
\if{latex}{\out{\hypertarget{method-input_output_list_converter}{}}}
\subsection{Method \code{input_output_list_converter()}}{
Converts a list of ProcessingInput or ProcessingOutput objects to a list of dicts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$input_output_list_converter(object_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_list}}{(list[ProcessingInput or ProcessingOutput]}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List of dicts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AirFlowWorkFlow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
